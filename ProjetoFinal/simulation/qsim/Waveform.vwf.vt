// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/27/2024 14:42:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ProjetoFinalCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProjetoFinalCD_vlg_sample_tst(
	ck,
	ck_man,
	d,
	rst,
	sel_mux,
	v0,
	v1,
	v2,
	w,
	sampler_tx
);
input  ck;
input  ck_man;
input [3:0] d;
input  rst;
input  sel_mux;
input  v0;
input  v1;
input  v2;
input [1:0] w;
output sampler_tx;

reg sample;
time current_time;
always @(ck or ck_man or d or rst or sel_mux or v0 or v1 or v2 or w)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ProjetoFinalCD_vlg_check_tst (
	B,
	C,
	cki,
	ha,
	hb,
	N,
	q,
	s,
	v,
	Z,
	sampler_rx
);
input  B;
input  C;
input  cki;
input [6:0] ha;
input [6:0] hb;
input  N;
input [3:0] q;
input [3:0] s;
input  v;
input  Z;
input sampler_rx;

reg  B_expected;
reg  C_expected;
reg  cki_expected;
reg [6:0] ha_expected;
reg [6:0] hb_expected;
reg  N_expected;
reg [3:0] q_expected;
reg [3:0] s_expected;
reg  v_expected;
reg  Z_expected;

reg  B_prev;
reg  C_prev;
reg  cki_prev;
reg [6:0] ha_prev;
reg [6:0] hb_prev;
reg  N_prev;
reg [3:0] q_prev;
reg [3:0] s_prev;
reg  v_prev;
reg  Z_prev;

reg  B_expected_prev;
reg  C_expected_prev;
reg  cki_expected_prev;
reg [6:0] ha_expected_prev;
reg [6:0] hb_expected_prev;
reg  N_expected_prev;
reg [3:0] q_expected_prev;
reg [3:0] s_expected_prev;
reg  v_expected_prev;
reg  Z_expected_prev;

reg  last_B_exp;
reg  last_C_exp;
reg  last_cki_exp;
reg [6:0] last_ha_exp;
reg [6:0] last_hb_exp;
reg  last_N_exp;
reg [3:0] last_q_exp;
reg [3:0] last_s_exp;
reg  last_v_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	B_prev = B;
	C_prev = C;
	cki_prev = cki;
	ha_prev = ha;
	hb_prev = hb;
	N_prev = N;
	q_prev = q;
	s_prev = s;
	v_prev = v;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	cki_expected_prev = cki_expected;
	ha_expected_prev = ha_expected;
	hb_expected_prev = hb_expected;
	N_expected_prev = N_expected;
	q_expected_prev = q_expected;
	s_expected_prev = s_expected;
	v_expected_prev = v_expected;
	Z_expected_prev = Z_expected;
end



// expected cki
initial
begin
	cki_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected v
initial
begin
	v_expected = 1'bX;
end 
// expected ha[ 6 ]
initial
begin
	ha_expected[6] = 1'bX;
end 
// expected ha[ 5 ]
initial
begin
	ha_expected[5] = 1'bX;
end 
// expected ha[ 4 ]
initial
begin
	ha_expected[4] = 1'bX;
end 
// expected ha[ 3 ]
initial
begin
	ha_expected[3] = 1'bX;
end 
// expected ha[ 2 ]
initial
begin
	ha_expected[2] = 1'bX;
end 
// expected ha[ 1 ]
initial
begin
	ha_expected[1] = 1'bX;
end 
// expected ha[ 0 ]
initial
begin
	ha_expected[0] = 1'bX;
end 
// expected hb[ 6 ]
initial
begin
	hb_expected[6] = 1'bX;
end 
// expected hb[ 5 ]
initial
begin
	hb_expected[5] = 1'bX;
end 
// expected hb[ 4 ]
initial
begin
	hb_expected[4] = 1'bX;
end 
// expected hb[ 3 ]
initial
begin
	hb_expected[3] = 1'bX;
end 
// expected hb[ 2 ]
initial
begin
	hb_expected[2] = 1'bX;
end 
// expected hb[ 1 ]
initial
begin
	hb_expected[1] = 1'bX;
end 
// expected hb[ 0 ]
initial
begin
	hb_expected[0] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 
// generate trigger
always @(B_expected or B or C_expected or C or cki_expected or cki or ha_expected or ha or hb_expected or hb or N_expected or N or q_expected or q or s_expected or s or v_expected or v or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B = %b | expected C = %b | expected cki = %b | expected ha = %b | expected hb = %b | expected N = %b | expected q = %b | expected s = %b | expected v = %b | expected Z = %b | ",B_expected_prev,C_expected_prev,cki_expected_prev,ha_expected_prev,hb_expected_prev,N_expected_prev,q_expected_prev,s_expected_prev,v_expected_prev,Z_expected_prev);
	$display("| real B = %b | real C = %b | real cki = %b | real ha = %b | real hb = %b | real N = %b | real q = %b | real s = %b | real v = %b | real Z = %b | ",B_prev,C_prev,cki_prev,ha_prev,hb_prev,N_prev,q_prev,s_prev,v_prev,Z_prev);
`endif
	if (
		( B_expected_prev !== 1'bx ) && ( B_prev !== B_expected_prev )
		&& ((B_expected_prev !== last_B_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_exp = B_expected_prev;
	end
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( cki_expected_prev !== 1'bx ) && ( cki_prev !== cki_expected_prev )
		&& ((cki_expected_prev !== last_cki_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cki :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cki_expected_prev);
		$display ("     Real value = %b", cki_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cki_exp = cki_expected_prev;
	end
	if (
		( ha_expected_prev[0] !== 1'bx ) && ( ha_prev[0] !== ha_expected_prev[0] )
		&& ((ha_expected_prev[0] !== last_ha_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[0] = ha_expected_prev[0];
	end
	if (
		( ha_expected_prev[1] !== 1'bx ) && ( ha_prev[1] !== ha_expected_prev[1] )
		&& ((ha_expected_prev[1] !== last_ha_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[1] = ha_expected_prev[1];
	end
	if (
		( ha_expected_prev[2] !== 1'bx ) && ( ha_prev[2] !== ha_expected_prev[2] )
		&& ((ha_expected_prev[2] !== last_ha_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[2] = ha_expected_prev[2];
	end
	if (
		( ha_expected_prev[3] !== 1'bx ) && ( ha_prev[3] !== ha_expected_prev[3] )
		&& ((ha_expected_prev[3] !== last_ha_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[3] = ha_expected_prev[3];
	end
	if (
		( ha_expected_prev[4] !== 1'bx ) && ( ha_prev[4] !== ha_expected_prev[4] )
		&& ((ha_expected_prev[4] !== last_ha_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[4] = ha_expected_prev[4];
	end
	if (
		( ha_expected_prev[5] !== 1'bx ) && ( ha_prev[5] !== ha_expected_prev[5] )
		&& ((ha_expected_prev[5] !== last_ha_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[5] = ha_expected_prev[5];
	end
	if (
		( ha_expected_prev[6] !== 1'bx ) && ( ha_prev[6] !== ha_expected_prev[6] )
		&& ((ha_expected_prev[6] !== last_ha_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ha[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ha_expected_prev);
		$display ("     Real value = %b", ha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ha_exp[6] = ha_expected_prev[6];
	end
	if (
		( hb_expected_prev[0] !== 1'bx ) && ( hb_prev[0] !== hb_expected_prev[0] )
		&& ((hb_expected_prev[0] !== last_hb_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[0] = hb_expected_prev[0];
	end
	if (
		( hb_expected_prev[1] !== 1'bx ) && ( hb_prev[1] !== hb_expected_prev[1] )
		&& ((hb_expected_prev[1] !== last_hb_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[1] = hb_expected_prev[1];
	end
	if (
		( hb_expected_prev[2] !== 1'bx ) && ( hb_prev[2] !== hb_expected_prev[2] )
		&& ((hb_expected_prev[2] !== last_hb_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[2] = hb_expected_prev[2];
	end
	if (
		( hb_expected_prev[3] !== 1'bx ) && ( hb_prev[3] !== hb_expected_prev[3] )
		&& ((hb_expected_prev[3] !== last_hb_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[3] = hb_expected_prev[3];
	end
	if (
		( hb_expected_prev[4] !== 1'bx ) && ( hb_prev[4] !== hb_expected_prev[4] )
		&& ((hb_expected_prev[4] !== last_hb_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[4] = hb_expected_prev[4];
	end
	if (
		( hb_expected_prev[5] !== 1'bx ) && ( hb_prev[5] !== hb_expected_prev[5] )
		&& ((hb_expected_prev[5] !== last_hb_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[5] = hb_expected_prev[5];
	end
	if (
		( hb_expected_prev[6] !== 1'bx ) && ( hb_prev[6] !== hb_expected_prev[6] )
		&& ((hb_expected_prev[6] !== last_hb_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hb[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hb_expected_prev);
		$display ("     Real value = %b", hb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hb_exp[6] = hb_expected_prev[6];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( v_expected_prev !== 1'bx ) && ( v_prev !== v_expected_prev )
		&& ((v_expected_prev !== last_v_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_expected_prev);
		$display ("     Real value = %b", v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_v_exp = v_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ProjetoFinalCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg ck_man;
reg [3:0] d;
reg rst;
reg sel_mux;
reg v0;
reg v1;
reg v2;
reg [1:0] w;
// wires                                               
wire B;
wire C;
wire cki;
wire [6:0] ha;
wire [6:0] hb;
wire N;
wire [3:0] q;
wire [3:0] s;
wire v;
wire Z;

wire sampler;                             

// assign statements (if any)                          
ProjetoFinalCD i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.C(C),
	.ck(ck),
	.ck_man(ck_man),
	.cki(cki),
	.d(d),
	.ha(ha),
	.hb(hb),
	.N(N),
	.q(q),
	.rst(rst),
	.s(s),
	.sel_mux(sel_mux),
	.v(v),
	.v0(v0),
	.v1(v1),
	.v2(v2),
	.w(w),
	.Z(Z)
);

// ck
initial
begin
	ck = 1'b0;
end 

// ck_man
initial
begin
	repeat(6)
	begin
		ck_man = 1'b0;
		ck_man = #80000 1'b1;
		# 80000;
	end
	ck_man = 1'b0;
end 

// sel_mux
initial
begin
	sel_mux = 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// v0
initial
begin
	v0 = 1'b0;
end 

// v1
initial
begin
	v1 = 1'b0;
end 

// v2
initial
begin
	v2 = 1'b0;
end 
// w[ 1 ]
initial
begin
	w[1] = 1'b1;
	w[1] = #120000 1'b0;
end 
// w[ 0 ]
initial
begin
	w[0] = 1'b1;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b1;
	d[1] = #120000 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b1;
	d[0] = #410000 1'b0;
end 

ProjetoFinalCD_vlg_sample_tst tb_sample (
	.ck(ck),
	.ck_man(ck_man),
	.d(d),
	.rst(rst),
	.sel_mux(sel_mux),
	.v0(v0),
	.v1(v1),
	.v2(v2),
	.w(w),
	.sampler_tx(sampler)
);

ProjetoFinalCD_vlg_check_tst tb_out(
	.B(B),
	.C(C),
	.cki(cki),
	.ha(ha),
	.hb(hb),
	.N(N),
	.q(q),
	.s(s),
	.v(v),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

